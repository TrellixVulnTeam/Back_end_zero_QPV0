'use strict';

var Test = require('../test');
<<<<<<< HEAD
var EVENT_FILE_PRE_REQUIRE = require('../suite').constants
  .EVENT_FILE_PRE_REQUIRE;
=======
var EVENT_FILE_PRE_REQUIRE =
  require('../suite').constants.EVENT_FILE_PRE_REQUIRE;
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6

/**
 * BDD-style interface:
 *
 *      describe('Array', function() {
 *        describe('#indexOf()', function() {
 *          it('should return -1 when not present', function() {
 *            // ...
 *          });
 *
 *          it('should return the index when present', function() {
 *            // ...
 *          });
 *        });
 *      });
 *
 * @param {Suite} suite Root suite.
 */
module.exports = function bddInterface(suite) {
  var suites = [suite];

<<<<<<< HEAD
  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {
=======
  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
    var common = require('./common')(suites, context, mocha);

    context.before = common.before;
    context.after = common.after;
    context.beforeEach = common.beforeEach;
    context.afterEach = common.afterEach;
    context.run = mocha.options.delay && common.runWithSuite(suite);
    /**
     * Describe a "suite" with the given `title`
     * and callback `fn` containing nested suites
     * and/or tests.
     */

<<<<<<< HEAD
    context.describe = context.context = function(title, fn) {
=======
    context.describe = context.context = function (title, fn) {
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
      return common.suite.create({
        title: title,
        file: file,
        fn: fn
      });
    };

    /**
     * Pending describe.
     */

<<<<<<< HEAD
    context.xdescribe = context.xcontext = context.describe.skip = function(
      title,
      fn
    ) {
      return common.suite.skip({
        title: title,
        file: file,
        fn: fn
      });
    };
=======
    context.xdescribe =
      context.xcontext =
      context.describe.skip =
        function (title, fn) {
          return common.suite.skip({
            title: title,
            file: file,
            fn: fn
          });
        };
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6

    /**
     * Exclusive suite.
     */

<<<<<<< HEAD
    context.describe.only = function(title, fn) {
=======
    context.describe.only = function (title, fn) {
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
      return common.suite.only({
        title: title,
        file: file,
        fn: fn
      });
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

<<<<<<< HEAD
    context.it = context.specify = function(title, fn) {
=======
    context.it = context.specify = function (title, fn) {
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
      var suite = suites[0];
      if (suite.isPending()) {
        fn = null;
      }
      var test = new Test(title, fn);
      test.file = file;
      suite.addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

<<<<<<< HEAD
    context.it.only = function(title, fn) {
=======
    context.it.only = function (title, fn) {
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
      return common.test.only(mocha, context.it(title, fn));
    };

    /**
     * Pending test case.
     */

<<<<<<< HEAD
    context.xit = context.xspecify = context.it.skip = function(title) {
      return context.it(title);
    };
=======
    context.xit =
      context.xspecify =
      context.it.skip =
        function (title) {
          return context.it(title);
        };
>>>>>>> a9bf8e899dd3a809ebc987a4500df6bba9db6fe6
  });
};

module.exports.description = 'BDD or RSpec style [default]';
